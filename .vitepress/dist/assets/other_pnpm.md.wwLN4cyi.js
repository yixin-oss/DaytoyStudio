import{_ as s,o as i,c as a,R as n}from"./chunks/framework.OYlsSK07.js";const m=JSON.parse('{"title":"pnpm","description":"","frontmatter":{},"headers":[],"relativePath":"other/pnpm.md","filePath":"other/pnpm.md"}'),p={name:"other/pnpm.md"},l=n(`<h1 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h1><h2 id="pnpm-概述" tabindex="-1">pnpm 概述 <a class="header-anchor" href="#pnpm-概述" aria-label="Permalink to &quot;pnpm 概述&quot;">​</a></h2><p><strong>perfomance npm，即 pnpm（高性能 npm）</strong></p><ul><li>速度快、节省磁盘空间的软件包管理器</li></ul><p><strong>优势</strong></p><ul><li><p>快速</p><ul><li><p>pnpm 是同类工具速度的将近 2 倍</p><p>在安装包之前，如果已经在全局安装过了，就不会再次下载了，节省了安装时间</p></li></ul></li><li><p>高效、节省磁盘空间</p><ul><li><p>node_modules 中的所有文件均链接自单一存储位置</p><p>pnpm 通过硬链接机制，把包都存储在全局 <code>pnpm/store</code> 目录下，当安装软件包时，其包含的所有文件都会硬链接到此位置，而且不会占用额外的磁盘空间</p><p>pnpm 对于同一个包不同版本也仅存储其增量改动部分</p></li></ul></li><li><p>支持 monorepos</p><ul><li>pnpm 内置了对单个源码仓库中包含多个软件包的支持</li></ul></li><li><p>严格</p><ul><li><p>pnpm 创建的 node_modules 默认并非扁平结构，因此代码无法对任意软件包进行访问</p><p>解决了 npm 存在的幽灵依赖的问题</p></li></ul></li></ul><h2 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h2><p><strong>依赖包版本管理</strong></p><p>npm 包版本一般规范为为 <code>x.y.z</code></p><ul><li>x 为主版本号 一般为大版本更新，可能不兼容之前的版本</li><li>y 为次版本号 一般为新增一恶搞功能，向下兼容</li><li>z 为修订版本号 一般是修复了小问题，小版本优化</li></ul><p>我们常见的版本号形如这样</p><ul><li><code>^x.y.z</code>:表示x是保持不变的，y和z永远安装最新的版本</li><li><code>~x.y.z</code>:表示x和y保持不变的，z永远安装最新的版本</li></ul><h3 id="npm-v1-v2-嵌套依赖" tabindex="-1">npm v1/v2 嵌套依赖 <a class="header-anchor" href="#npm-v1-v2-嵌套依赖" aria-label="Permalink to &quot;npm v1/v2 嵌套依赖&quot;">​</a></h3><p>最开始其实没有注重 npm 包的管理，只是简单的嵌套依赖，这种方式层级依赖结构清晰。但是随着 npm 包的增多，项目的迭代扩展，重复包越下载越多，造成了空间浪费</p><p>如下图：依赖包 C 在 A、B 中都被引用了，被重复下载了两次，其实是两个完全相同的东西</p><p><img src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/image-20220823091455884.png" alt="image-20220823091455884"></p><h3 id="npm-v3-扁平化" tabindex="-1">npm v3 扁平化 <a class="header-anchor" href="#npm-v3-扁平化" aria-label="Permalink to &quot;npm v3 扁平化&quot;">​</a></h3><p>npm 团队也意识到这个问题，通过<strong>扁平化</strong>的方式，将子依赖<strong>提升安装</strong>到了主依赖所在项目中，以减少依赖嵌套太深，和重复下载安装的问题</p><p>如下图所示：</p><ul><li>A 的依赖项 C 被提升到了顶层，如果后续有安装包也依赖 C，会去上一级的 node_modules 查询</li><li>如果有相同的版本的包，则不会再去下载，直接从上一层拿到需要的依赖包 C</li></ul><blockquote><p>为什么自己的 node_modules 没有 C，也能在上层访问到 C？</p><ul><li>require 寻找第三方包，会每层依赖去寻找 node_modules，所以即便是本层没有 node_modules，上层有也能找到</li></ul></blockquote><p><img src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/image-20220823091636459.png" alt="image-20220823091636459"></p><p>扁平化方式解决了相同包重复安装的问题，也<strong>一定程度上</strong>解决了依赖层级太深的问题</p><p><strong>为什么说是一定程度上？</strong></p><ul><li>B 依赖的 C v2.0.0 并没有提升，依然是嵌套依赖，因为两个依赖包 C 的版本不一致，只能保证一个在顶层</li><li>上图所示 v1.0.0 被提升了，v2.0.0 没有被提升，后续 v2.0.0 还是会被重复下载</li><li>所以<strong>当出现多重依赖时，依然会出现重复安装的问题</strong></li></ul><p><strong>提升的顺序</strong></p><ul><li>不是根据使用优先提升，而是根据先来先服务的原则，先安装先提升</li><li>这就会导致不确定性，随着项目迭代，npm i 之后得到的 node_modules 目录结构，有可能不一样</li></ul><p>由于把 C 提升到了顶层，即使 <code>package.json</code>　中没有声明过 C，但是还是可以在项目中引用 C，这就是幽灵依赖问题</p><h3 id="npm-v5-lock" tabindex="-1">npm v5 lock <a class="header-anchor" href="#npm-v5-lock" aria-label="Permalink to &quot;npm v5 lock&quot;">​</a></h3><p>npm v5 借鉴了 yarn 思想，新增了 <code>package-lock.json</code></p><ul><li>该文件里面记录了 <code>package.json</code> 依赖的模块，以及模块的子依赖。并且给每个依赖标明了版本、获取地址和验证模块完整性哈希</li><li>通过 <code>package-lock.json</code>，保障了依赖包安装的确定性与兼容性，使得每次安装都会出现相同的结果</li></ul><p><strong>字段文件说明</strong></p><p><img src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/image-20220823094401933.png" alt="image-20220823094401933"></p><ul><li><p>name：项目的名称</p></li><li><p>version：项目的版本</p></li><li><p>lockfileVersion：lock 文件的版本</p></li><li><p>requires：使用 requires 来跟踪模块的依赖关系</p></li><li><p>dependencies：项目的依赖</p><ul><li><p>version：表示实际安装的版本</p></li><li><p>resolved：用来记录下载的地址，registry 仓库中的位置</p></li><li><p>requires：记录当前模块的依赖</p></li><li><p>integrity：用来从缓存中获取索引，再通过索引去获取压缩包文件</p></li></ul></li></ul><h3 id="npm-i" tabindex="-1">npm i <a class="header-anchor" href="#npm-i" aria-label="Permalink to &quot;npm i&quot;">​</a></h3><p><img src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/image-20220823094821001.png" alt="image-20220823094821001"></p><h2 id="pnpm-1" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm-1" aria-label="Permalink to &quot;pnpm&quot;">​</a></h2><p>基于<strong>npm扁平化node_modules</strong>的结构下，虽然解决了依赖嵌套、重复安装的问题，但<strong>多重依赖和幽灵依赖</strong>并没有好的解决方式</p><h3 id="硬链接软链接" tabindex="-1">硬链接软链接 <a class="header-anchor" href="#硬链接软链接" aria-label="Permalink to &quot;硬链接软链接&quot;">​</a></h3><p>在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)</p><ul><li>A 是 B 的硬链接（A 和 B 都是文件名）则 A 文件中的 inode 节点号与 B 文件的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件</li><li>软硬链接是 Linux 中<strong>解决文件的共享使用问题的两个方式，目的也是为了节省磁盘空间</strong></li></ul><p>硬链接就类似 JS 中的两个相同的对象，a 和 b 的真实内容指向堆中同一个地址，修改一个，同时改变，一荣俱荣，一损俱损。删除一个，并不影响另一个</p><p>软链接就是快捷方式，是一个单独文件。就像我们电脑桌面上的快捷方式，大小只有几字节，指向源文件，点击快捷方式，其实执行的就是源文件</p><blockquote><p><a href="https://meixg.cn/2021/01/25/ln-nodejs/#%E8%BD%AF%E9%93%BE%E4%BE%9D%E8%B5%96%E7%9B%AE%E5%BD%95" target="_blank" rel="noreferrer">软链、硬链对 Node.js 包寻找的影响</a></p></blockquote><p>硬链、软链对 Node.js 包寻找的影响：</p><ul><li>硬链接会从链接到的位置开始查找依赖，而软链接会从文件原始位置开始查找依赖</li><li>软链可以将其他地方的目录增加到依赖查找路径中</li></ul><h3 id="node-modules-层级结构" tabindex="-1">node_modules 层级结构 <a class="header-anchor" href="#node-modules-层级结构" aria-label="Permalink to &quot;node_modules 层级结构&quot;">​</a></h3><p>比如某项目中，<code>package.json</code> 里声明了 A 和 B</p><ul><li>A 的 <code>package.json</code> 里声明了 C v1.0.0</li><li>B 的 <code>package.json</code> 里声明了 C v2.0.0</li></ul><p><img src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/image-20220823091455884-16612203770963.png" alt="image-20220823091455884"></p><p>进行 pnpm i 之后，node_modules 的层级结构如下</p><ul><li>双键头代表硬链接</li><li>单箭头代表软链接</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node_modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .pnpm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node_modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .pnpm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node_modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ .pnpm</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ node_modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pnpm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ..</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node_modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ node_modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pnpm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ..</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node_modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ node_modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pnpm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ node_modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pnpm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>以 A 包为例，A 的目录下并没有 node_modules，是一个软链接，真正的文件位于 <code>.pnpm/A@1.0.0/node_modules/A</code> 并硬链接到全局 store 中</p><ul><li>A 和 B 是我们项目 <code>package.json</code> 中声明的依赖包，node_modules 除了 A、B 没有其他包，说明不是扁平化结构，也就不存在 <strong>幽灵依赖的问题</strong></li></ul><p>.pnpm 中存放着所有的包，最终硬链接指向全局 pnpm 仓库的 store 目录下</p><ul><li>这样可以在不同项目中从全局 store 中寻找同一个依赖，大大节省了硬盘空间</li></ul><p><img src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/image-20220823101203726.png" alt="image-20220823101203726"></p><h3 id="pnpm-store-的目录结构" tabindex="-1">pnpm-store 的目录结构 <a class="header-anchor" href="#pnpm-store-的目录结构" aria-label="Permalink to &quot;pnpm-store 的目录结构&quot;">​</a></h3><p>pnpm 全局目录结构如下：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ├──</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd3e571524c095738</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 02</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a74db92f0368580</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ├──</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 01</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ├──</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 02</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在全局目录里存放的不是 npm 包的源码，而是 hash 值这里采用了基于文件内容寻址方案</p><ul><li>文件内容被加密成了 64 位 hash 值，如果文件内容不变，hash 值也不会变</li><li>一般来说 npm 包都是向下兼容的，两个版本的包只是部分差别，使用 hash 存储，会根据文件内容变化，只会存储变化的部分，，相同的部分，生成的hash不会变，只存储一份就够了，<strong>一定程度上，也节省了磁盘空间</strong></li></ul><h3 id="pnpm-弊端" tabindex="-1">pnpm 弊端 <a class="header-anchor" href="#pnpm-弊端" aria-label="Permalink to &quot;pnpm 弊端&quot;">​</a></h3><p>所有项目引用的包都在全局一个地方，如果相对某个包进行调试，其他项目正好引用，本地运行就会受到影响</p><p><strong>兼容问题</strong></p><ul><li><strong>symlink</strong> 即软连接的方式可能会在 windows 存在一些兼容的问题，但是针对这个问题，pnpm 也提供了对应的解决方案：在 win 系统上使用一个叫做 <strong>junctions</strong> 的特性来替代软连接，这个方案在 win 上的兼容性要好于 symlink</li></ul><h2 id="maven" tabindex="-1">Maven <a class="header-anchor" href="#maven" aria-label="Permalink to &quot;Maven&quot;">​</a></h2><p>Maven 是一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理，相当于前端的 npm</p><ul><li><p>Java 启动项目，需要在编译器里先配置本地的一个公共路径，公共路径存放全局所有项目依赖的 jar 包</p></li><li><p>jar 包和前端 npm 包原理一样，对于嵌套依赖的问题，Maven 的处理方式是对所有的 jar 包扁平化处理</p></li><li><p>因为存放到了全局一个自定义的目录下，所以不存在重复下载问题，但是存在幽灵依赖问题</p><p>Java 开发习以为常，如果严格控制，配置文件会有一堆</p></li></ul><p><strong>Java 引用包的时候是严格的</strong>，需要声明包所属公司、包名、包版本，依赖是明确的，可以全部扁平化处理。但是<strong>前端包管理是松散的</strong>，只有一行引用 <code>require/import</code>，并不知道具体要引用哪个版本的包，node_modules 里有哪个版本引用哪个版本。所以 npm 在扁平化处理的时候，做不到把两个相同包、不同版本全部扁平化，因为会导致代码出现紊乱</p>`,71),h=[l];function e(t,k,r,d,o,g){return i(),a("div",null,h)}const c=s(p,[["render",e]]);export{m as __pageData,c as default};
